/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.node;

import xslt.analysis.*;

@SuppressWarnings("nls")
public final class ASorting extends PSorting
{
    private TXsltTag _xsltTag_;
    private TSort _sort_;
    private PSortOptions _sortOptions_;
    private TCloseTag _closeTag_;

    public ASorting()
    {
        // Constructor
    }

    public ASorting(
        @SuppressWarnings("hiding") TXsltTag _xsltTag_,
        @SuppressWarnings("hiding") TSort _sort_,
        @SuppressWarnings("hiding") PSortOptions _sortOptions_,
        @SuppressWarnings("hiding") TCloseTag _closeTag_)
    {
        // Constructor
        setXsltTag(_xsltTag_);

        setSort(_sort_);

        setSortOptions(_sortOptions_);

        setCloseTag(_closeTag_);

    }

    @Override
    public Object clone()
    {
        return new ASorting(
            cloneNode(this._xsltTag_),
            cloneNode(this._sort_),
            cloneNode(this._sortOptions_),
            cloneNode(this._closeTag_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASorting(this);
    }

    public TXsltTag getXsltTag()
    {
        return this._xsltTag_;
    }

    public void setXsltTag(TXsltTag node)
    {
        if(this._xsltTag_ != null)
        {
            this._xsltTag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._xsltTag_ = node;
    }

    public TSort getSort()
    {
        return this._sort_;
    }

    public void setSort(TSort node)
    {
        if(this._sort_ != null)
        {
            this._sort_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sort_ = node;
    }

    public PSortOptions getSortOptions()
    {
        return this._sortOptions_;
    }

    public void setSortOptions(PSortOptions node)
    {
        if(this._sortOptions_ != null)
        {
            this._sortOptions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sortOptions_ = node;
    }

    public TCloseTag getCloseTag()
    {
        return this._closeTag_;
    }

    public void setCloseTag(TCloseTag node)
    {
        if(this._closeTag_ != null)
        {
            this._closeTag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeTag_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._xsltTag_)
            + toString(this._sort_)
            + toString(this._sortOptions_)
            + toString(this._closeTag_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._xsltTag_ == child)
        {
            this._xsltTag_ = null;
            return;
        }

        if(this._sort_ == child)
        {
            this._sort_ = null;
            return;
        }

        if(this._sortOptions_ == child)
        {
            this._sortOptions_ = null;
            return;
        }

        if(this._closeTag_ == child)
        {
            this._closeTag_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._xsltTag_ == oldChild)
        {
            setXsltTag((TXsltTag) newChild);
            return;
        }

        if(this._sort_ == oldChild)
        {
            setSort((TSort) newChild);
            return;
        }

        if(this._sortOptions_ == oldChild)
        {
            setSortOptions((PSortOptions) newChild);
            return;
        }

        if(this._closeTag_ == oldChild)
        {
            setCloseTag((TCloseTag) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
