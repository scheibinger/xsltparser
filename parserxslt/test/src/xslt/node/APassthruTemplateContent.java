/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.node;

import java.util.*;
import xslt.analysis.*;

@SuppressWarnings("nls")
public final class APassthruTemplateContent extends PTemplateContent
{
    private TOpenTag _openTag_;
    private final LinkedList<TTextToPass> _textToPass_ = new LinkedList<TTextToPass>();

    public APassthruTemplateContent()
    {
        // Constructor
    }

    public APassthruTemplateContent(
        @SuppressWarnings("hiding") TOpenTag _openTag_,
        @SuppressWarnings("hiding") List<TTextToPass> _textToPass_)
    {
        // Constructor
        setOpenTag(_openTag_);

        setTextToPass(_textToPass_);

    }

    @Override
    public Object clone()
    {
        return new APassthruTemplateContent(
            cloneNode(this._openTag_),
            cloneList(this._textToPass_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPassthruTemplateContent(this);
    }

    public TOpenTag getOpenTag()
    {
        return this._openTag_;
    }

    public void setOpenTag(TOpenTag node)
    {
        if(this._openTag_ != null)
        {
            this._openTag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openTag_ = node;
    }

    public LinkedList<TTextToPass> getTextToPass()
    {
        return this._textToPass_;
    }

    public void setTextToPass(List<TTextToPass> list)
    {
        this._textToPass_.clear();
        this._textToPass_.addAll(list);
        for(TTextToPass e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._openTag_)
            + toString(this._textToPass_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._openTag_ == child)
        {
            this._openTag_ = null;
            return;
        }

        if(this._textToPass_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._openTag_ == oldChild)
        {
            setOpenTag((TOpenTag) newChild);
            return;
        }

        for(ListIterator<TTextToPass> i = this._textToPass_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TTextToPass) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
