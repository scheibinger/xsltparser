/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.node;

import java.util.*;
import xslt.analysis.*;

@SuppressWarnings("nls")
public final class AParamTemplateContent extends PTemplateContent
{
    private TXsltTag _xsltTag_;
    private TParam _open_;
    private TName _name_;
    private TEqual _equal_;
    private PText _paramName_;
    private TSelect _select_;
    private PText _paramSelect_;
    private TCloseTag _closeParam_;
    private final LinkedList<PTemplateContent> _templateContent_ = new LinkedList<PTemplateContent>();
    private TCloseXsltTag _closeXsltTag_;
    private TParam _close_;
    private TCloseTag _closeXslt_;

    public AParamTemplateContent()
    {
        // Constructor
    }

    public AParamTemplateContent(
        @SuppressWarnings("hiding") TXsltTag _xsltTag_,
        @SuppressWarnings("hiding") TParam _open_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") PText _paramName_,
        @SuppressWarnings("hiding") TSelect _select_,
        @SuppressWarnings("hiding") PText _paramSelect_,
        @SuppressWarnings("hiding") TCloseTag _closeParam_,
        @SuppressWarnings("hiding") List<PTemplateContent> _templateContent_,
        @SuppressWarnings("hiding") TCloseXsltTag _closeXsltTag_,
        @SuppressWarnings("hiding") TParam _close_,
        @SuppressWarnings("hiding") TCloseTag _closeXslt_)
    {
        // Constructor
        setXsltTag(_xsltTag_);

        setOpen(_open_);

        setName(_name_);

        setEqual(_equal_);

        setParamName(_paramName_);

        setSelect(_select_);

        setParamSelect(_paramSelect_);

        setCloseParam(_closeParam_);

        setTemplateContent(_templateContent_);

        setCloseXsltTag(_closeXsltTag_);

        setClose(_close_);

        setCloseXslt(_closeXslt_);

    }

    @Override
    public Object clone()
    {
        return new AParamTemplateContent(
            cloneNode(this._xsltTag_),
            cloneNode(this._open_),
            cloneNode(this._name_),
            cloneNode(this._equal_),
            cloneNode(this._paramName_),
            cloneNode(this._select_),
            cloneNode(this._paramSelect_),
            cloneNode(this._closeParam_),
            cloneList(this._templateContent_),
            cloneNode(this._closeXsltTag_),
            cloneNode(this._close_),
            cloneNode(this._closeXslt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParamTemplateContent(this);
    }

    public TXsltTag getXsltTag()
    {
        return this._xsltTag_;
    }

    public void setXsltTag(TXsltTag node)
    {
        if(this._xsltTag_ != null)
        {
            this._xsltTag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._xsltTag_ = node;
    }

    public TParam getOpen()
    {
        return this._open_;
    }

    public void setOpen(TParam node)
    {
        if(this._open_ != null)
        {
            this._open_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._open_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public PText getParamName()
    {
        return this._paramName_;
    }

    public void setParamName(PText node)
    {
        if(this._paramName_ != null)
        {
            this._paramName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramName_ = node;
    }

    public TSelect getSelect()
    {
        return this._select_;
    }

    public void setSelect(TSelect node)
    {
        if(this._select_ != null)
        {
            this._select_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._select_ = node;
    }

    public PText getParamSelect()
    {
        return this._paramSelect_;
    }

    public void setParamSelect(PText node)
    {
        if(this._paramSelect_ != null)
        {
            this._paramSelect_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramSelect_ = node;
    }

    public TCloseTag getCloseParam()
    {
        return this._closeParam_;
    }

    public void setCloseParam(TCloseTag node)
    {
        if(this._closeParam_ != null)
        {
            this._closeParam_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeParam_ = node;
    }

    public LinkedList<PTemplateContent> getTemplateContent()
    {
        return this._templateContent_;
    }

    public void setTemplateContent(List<PTemplateContent> list)
    {
        this._templateContent_.clear();
        this._templateContent_.addAll(list);
        for(PTemplateContent e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TCloseXsltTag getCloseXsltTag()
    {
        return this._closeXsltTag_;
    }

    public void setCloseXsltTag(TCloseXsltTag node)
    {
        if(this._closeXsltTag_ != null)
        {
            this._closeXsltTag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeXsltTag_ = node;
    }

    public TParam getClose()
    {
        return this._close_;
    }

    public void setClose(TParam node)
    {
        if(this._close_ != null)
        {
            this._close_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._close_ = node;
    }

    public TCloseTag getCloseXslt()
    {
        return this._closeXslt_;
    }

    public void setCloseXslt(TCloseTag node)
    {
        if(this._closeXslt_ != null)
        {
            this._closeXslt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeXslt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._xsltTag_)
            + toString(this._open_)
            + toString(this._name_)
            + toString(this._equal_)
            + toString(this._paramName_)
            + toString(this._select_)
            + toString(this._paramSelect_)
            + toString(this._closeParam_)
            + toString(this._templateContent_)
            + toString(this._closeXsltTag_)
            + toString(this._close_)
            + toString(this._closeXslt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._xsltTag_ == child)
        {
            this._xsltTag_ = null;
            return;
        }

        if(this._open_ == child)
        {
            this._open_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._paramName_ == child)
        {
            this._paramName_ = null;
            return;
        }

        if(this._select_ == child)
        {
            this._select_ = null;
            return;
        }

        if(this._paramSelect_ == child)
        {
            this._paramSelect_ = null;
            return;
        }

        if(this._closeParam_ == child)
        {
            this._closeParam_ = null;
            return;
        }

        if(this._templateContent_.remove(child))
        {
            return;
        }

        if(this._closeXsltTag_ == child)
        {
            this._closeXsltTag_ = null;
            return;
        }

        if(this._close_ == child)
        {
            this._close_ = null;
            return;
        }

        if(this._closeXslt_ == child)
        {
            this._closeXslt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._xsltTag_ == oldChild)
        {
            setXsltTag((TXsltTag) newChild);
            return;
        }

        if(this._open_ == oldChild)
        {
            setOpen((TParam) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._paramName_ == oldChild)
        {
            setParamName((PText) newChild);
            return;
        }

        if(this._select_ == oldChild)
        {
            setSelect((TSelect) newChild);
            return;
        }

        if(this._paramSelect_ == oldChild)
        {
            setParamSelect((PText) newChild);
            return;
        }

        if(this._closeParam_ == oldChild)
        {
            setCloseParam((TCloseTag) newChild);
            return;
        }

        for(ListIterator<PTemplateContent> i = this._templateContent_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTemplateContent) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._closeXsltTag_ == oldChild)
        {
            setCloseXsltTag((TCloseXsltTag) newChild);
            return;
        }

        if(this._close_ == oldChild)
        {
            setClose((TParam) newChild);
            return;
        }

        if(this._closeXslt_ == oldChild)
        {
            setCloseXslt((TCloseTag) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
