/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.node;

import xslt.analysis.*;

@SuppressWarnings("nls")
public final class AVariableTemplateContent extends PTemplateContent
{
    private TXsltTag _xsltTag_;
    private TVariable _variable_;
    private TName _name_;
    private TEqual _nameEqual_;
    private PText _paramName_;
    private TSelect _select_;
    private TEqual _selectEqual_;
    private PText _paramSelect_;
    private TCloseTagRange _closeTagRange_;

    public AVariableTemplateContent()
    {
        // Constructor
    }

    public AVariableTemplateContent(
        @SuppressWarnings("hiding") TXsltTag _xsltTag_,
        @SuppressWarnings("hiding") TVariable _variable_,
        @SuppressWarnings("hiding") TName _name_,
        @SuppressWarnings("hiding") TEqual _nameEqual_,
        @SuppressWarnings("hiding") PText _paramName_,
        @SuppressWarnings("hiding") TSelect _select_,
        @SuppressWarnings("hiding") TEqual _selectEqual_,
        @SuppressWarnings("hiding") PText _paramSelect_,
        @SuppressWarnings("hiding") TCloseTagRange _closeTagRange_)
    {
        // Constructor
        setXsltTag(_xsltTag_);

        setVariable(_variable_);

        setName(_name_);

        setNameEqual(_nameEqual_);

        setParamName(_paramName_);

        setSelect(_select_);

        setSelectEqual(_selectEqual_);

        setParamSelect(_paramSelect_);

        setCloseTagRange(_closeTagRange_);

    }

    @Override
    public Object clone()
    {
        return new AVariableTemplateContent(
            cloneNode(this._xsltTag_),
            cloneNode(this._variable_),
            cloneNode(this._name_),
            cloneNode(this._nameEqual_),
            cloneNode(this._paramName_),
            cloneNode(this._select_),
            cloneNode(this._selectEqual_),
            cloneNode(this._paramSelect_),
            cloneNode(this._closeTagRange_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableTemplateContent(this);
    }

    public TXsltTag getXsltTag()
    {
        return this._xsltTag_;
    }

    public void setXsltTag(TXsltTag node)
    {
        if(this._xsltTag_ != null)
        {
            this._xsltTag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._xsltTag_ = node;
    }

    public TVariable getVariable()
    {
        return this._variable_;
    }

    public void setVariable(TVariable node)
    {
        if(this._variable_ != null)
        {
            this._variable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variable_ = node;
    }

    public TName getName()
    {
        return this._name_;
    }

    public void setName(TName node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public TEqual getNameEqual()
    {
        return this._nameEqual_;
    }

    public void setNameEqual(TEqual node)
    {
        if(this._nameEqual_ != null)
        {
            this._nameEqual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nameEqual_ = node;
    }

    public PText getParamName()
    {
        return this._paramName_;
    }

    public void setParamName(PText node)
    {
        if(this._paramName_ != null)
        {
            this._paramName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramName_ = node;
    }

    public TSelect getSelect()
    {
        return this._select_;
    }

    public void setSelect(TSelect node)
    {
        if(this._select_ != null)
        {
            this._select_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._select_ = node;
    }

    public TEqual getSelectEqual()
    {
        return this._selectEqual_;
    }

    public void setSelectEqual(TEqual node)
    {
        if(this._selectEqual_ != null)
        {
            this._selectEqual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._selectEqual_ = node;
    }

    public PText getParamSelect()
    {
        return this._paramSelect_;
    }

    public void setParamSelect(PText node)
    {
        if(this._paramSelect_ != null)
        {
            this._paramSelect_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramSelect_ = node;
    }

    public TCloseTagRange getCloseTagRange()
    {
        return this._closeTagRange_;
    }

    public void setCloseTagRange(TCloseTagRange node)
    {
        if(this._closeTagRange_ != null)
        {
            this._closeTagRange_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeTagRange_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._xsltTag_)
            + toString(this._variable_)
            + toString(this._name_)
            + toString(this._nameEqual_)
            + toString(this._paramName_)
            + toString(this._select_)
            + toString(this._selectEqual_)
            + toString(this._paramSelect_)
            + toString(this._closeTagRange_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._xsltTag_ == child)
        {
            this._xsltTag_ = null;
            return;
        }

        if(this._variable_ == child)
        {
            this._variable_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._nameEqual_ == child)
        {
            this._nameEqual_ = null;
            return;
        }

        if(this._paramName_ == child)
        {
            this._paramName_ = null;
            return;
        }

        if(this._select_ == child)
        {
            this._select_ = null;
            return;
        }

        if(this._selectEqual_ == child)
        {
            this._selectEqual_ = null;
            return;
        }

        if(this._paramSelect_ == child)
        {
            this._paramSelect_ = null;
            return;
        }

        if(this._closeTagRange_ == child)
        {
            this._closeTagRange_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._xsltTag_ == oldChild)
        {
            setXsltTag((TXsltTag) newChild);
            return;
        }

        if(this._variable_ == oldChild)
        {
            setVariable((TVariable) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TName) newChild);
            return;
        }

        if(this._nameEqual_ == oldChild)
        {
            setNameEqual((TEqual) newChild);
            return;
        }

        if(this._paramName_ == oldChild)
        {
            setParamName((PText) newChild);
            return;
        }

        if(this._select_ == oldChild)
        {
            setSelect((TSelect) newChild);
            return;
        }

        if(this._selectEqual_ == oldChild)
        {
            setSelectEqual((TEqual) newChild);
            return;
        }

        if(this._paramSelect_ == oldChild)
        {
            setParamSelect((PText) newChild);
            return;
        }

        if(this._closeTagRange_ == oldChild)
        {
            setCloseTagRange((TCloseTagRange) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
