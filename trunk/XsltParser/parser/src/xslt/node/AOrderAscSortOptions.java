/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.node;

import xslt.analysis.*;

@SuppressWarnings("nls")
public final class AOrderAscSortOptions extends PSortOptions
{
    private TOrder _order_;
    private TEqual _equal_;
    private TAscending _ascending_;

    public AOrderAscSortOptions()
    {
        // Constructor
    }

    public AOrderAscSortOptions(
        @SuppressWarnings("hiding") TOrder _order_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") TAscending _ascending_)
    {
        // Constructor
        setOrder(_order_);

        setEqual(_equal_);

        setAscending(_ascending_);

    }

    @Override
    public Object clone()
    {
        return new AOrderAscSortOptions(
            cloneNode(this._order_),
            cloneNode(this._equal_),
            cloneNode(this._ascending_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrderAscSortOptions(this);
    }

    public TOrder getOrder()
    {
        return this._order_;
    }

    public void setOrder(TOrder node)
    {
        if(this._order_ != null)
        {
            this._order_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._order_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public TAscending getAscending()
    {
        return this._ascending_;
    }

    public void setAscending(TAscending node)
    {
        if(this._ascending_ != null)
        {
            this._ascending_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ascending_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._order_)
            + toString(this._equal_)
            + toString(this._ascending_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._order_ == child)
        {
            this._order_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._ascending_ == child)
        {
            this._ascending_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._order_ == oldChild)
        {
            setOrder((TOrder) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._ascending_ == oldChild)
        {
            setAscending((TAscending) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
