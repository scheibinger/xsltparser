/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.node;

import xslt.analysis.*;

@SuppressWarnings("nls")
public final class ALangSortOptions extends PSortOptions
{
    private TLang _lang_;
    private TEqual _equal_;
    private TXml _xml_;
    private TColon _colon_;
    private PText _text_;

    public ALangSortOptions()
    {
        // Constructor
    }

    public ALangSortOptions(
        @SuppressWarnings("hiding") TLang _lang_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") TXml _xml_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PText _text_)
    {
        // Constructor
        setLang(_lang_);

        setEqual(_equal_);

        setXml(_xml_);

        setColon(_colon_);

        setText(_text_);

    }

    @Override
    public Object clone()
    {
        return new ALangSortOptions(
            cloneNode(this._lang_),
            cloneNode(this._equal_),
            cloneNode(this._xml_),
            cloneNode(this._colon_),
            cloneNode(this._text_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALangSortOptions(this);
    }

    public TLang getLang()
    {
        return this._lang_;
    }

    public void setLang(TLang node)
    {
        if(this._lang_ != null)
        {
            this._lang_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lang_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public TXml getXml()
    {
        return this._xml_;
    }

    public void setXml(TXml node)
    {
        if(this._xml_ != null)
        {
            this._xml_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._xml_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PText getText()
    {
        return this._text_;
    }

    public void setText(PText node)
    {
        if(this._text_ != null)
        {
            this._text_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._text_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lang_)
            + toString(this._equal_)
            + toString(this._xml_)
            + toString(this._colon_)
            + toString(this._text_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lang_ == child)
        {
            this._lang_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._xml_ == child)
        {
            this._xml_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._text_ == child)
        {
            this._text_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lang_ == oldChild)
        {
            setLang((TLang) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._xml_ == oldChild)
        {
            setXml((TXml) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._text_ == oldChild)
        {
            setText((PText) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
