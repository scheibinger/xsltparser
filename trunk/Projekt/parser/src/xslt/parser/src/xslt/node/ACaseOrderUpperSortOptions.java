/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.node;

import xslt.analysis.*;

@SuppressWarnings("nls")
public final class ACaseOrderUpperSortOptions extends PSortOptions
{
    private TCaseOrder _caseOrder_;
    private TEqual _equal_;
    private TUpperFirst _upperFirst_;

    public ACaseOrderUpperSortOptions()
    {
        // Constructor
    }

    public ACaseOrderUpperSortOptions(
        @SuppressWarnings("hiding") TCaseOrder _caseOrder_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") TUpperFirst _upperFirst_)
    {
        // Constructor
        setCaseOrder(_caseOrder_);

        setEqual(_equal_);

        setUpperFirst(_upperFirst_);

    }

    @Override
    public Object clone()
    {
        return new ACaseOrderUpperSortOptions(
            cloneNode(this._caseOrder_),
            cloneNode(this._equal_),
            cloneNode(this._upperFirst_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACaseOrderUpperSortOptions(this);
    }

    public TCaseOrder getCaseOrder()
    {
        return this._caseOrder_;
    }

    public void setCaseOrder(TCaseOrder node)
    {
        if(this._caseOrder_ != null)
        {
            this._caseOrder_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caseOrder_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public TUpperFirst getUpperFirst()
    {
        return this._upperFirst_;
    }

    public void setUpperFirst(TUpperFirst node)
    {
        if(this._upperFirst_ != null)
        {
            this._upperFirst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._upperFirst_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._caseOrder_)
            + toString(this._equal_)
            + toString(this._upperFirst_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._caseOrder_ == child)
        {
            this._caseOrder_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._upperFirst_ == child)
        {
            this._upperFirst_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._caseOrder_ == oldChild)
        {
            setCaseOrder((TCaseOrder) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._upperFirst_ == oldChild)
        {
            setUpperFirst((TUpperFirst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
