/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.node;

import xslt.analysis.*;

@SuppressWarnings("nls")
public final class AImportImportElement extends PImportElement
{
    private TXsltTag _xsltTag_;
    private TImport _import_;
    private THref _href_;
    private TEqual _equal_;
    private PText _text_;
    private TCloseTagRange _closeTagRange_;

    public AImportImportElement()
    {
        // Constructor
    }

    public AImportImportElement(
        @SuppressWarnings("hiding") TXsltTag _xsltTag_,
        @SuppressWarnings("hiding") TImport _import_,
        @SuppressWarnings("hiding") THref _href_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") PText _text_,
        @SuppressWarnings("hiding") TCloseTagRange _closeTagRange_)
    {
        // Constructor
        setXsltTag(_xsltTag_);

        setImport(_import_);

        setHref(_href_);

        setEqual(_equal_);

        setText(_text_);

        setCloseTagRange(_closeTagRange_);

    }

    @Override
    public Object clone()
    {
        return new AImportImportElement(
            cloneNode(this._xsltTag_),
            cloneNode(this._import_),
            cloneNode(this._href_),
            cloneNode(this._equal_),
            cloneNode(this._text_),
            cloneNode(this._closeTagRange_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAImportImportElement(this);
    }

    public TXsltTag getXsltTag()
    {
        return this._xsltTag_;
    }

    public void setXsltTag(TXsltTag node)
    {
        if(this._xsltTag_ != null)
        {
            this._xsltTag_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._xsltTag_ = node;
    }

    public TImport getImport()
    {
        return this._import_;
    }

    public void setImport(TImport node)
    {
        if(this._import_ != null)
        {
            this._import_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._import_ = node;
    }

    public THref getHref()
    {
        return this._href_;
    }

    public void setHref(THref node)
    {
        if(this._href_ != null)
        {
            this._href_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._href_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public PText getText()
    {
        return this._text_;
    }

    public void setText(PText node)
    {
        if(this._text_ != null)
        {
            this._text_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._text_ = node;
    }

    public TCloseTagRange getCloseTagRange()
    {
        return this._closeTagRange_;
    }

    public void setCloseTagRange(TCloseTagRange node)
    {
        if(this._closeTagRange_ != null)
        {
            this._closeTagRange_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeTagRange_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._xsltTag_)
            + toString(this._import_)
            + toString(this._href_)
            + toString(this._equal_)
            + toString(this._text_)
            + toString(this._closeTagRange_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._xsltTag_ == child)
        {
            this._xsltTag_ = null;
            return;
        }

        if(this._import_ == child)
        {
            this._import_ = null;
            return;
        }

        if(this._href_ == child)
        {
            this._href_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._text_ == child)
        {
            this._text_ = null;
            return;
        }

        if(this._closeTagRange_ == child)
        {
            this._closeTagRange_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._xsltTag_ == oldChild)
        {
            setXsltTag((TXsltTag) newChild);
            return;
        }

        if(this._import_ == oldChild)
        {
            setImport((TImport) newChild);
            return;
        }

        if(this._href_ == oldChild)
        {
            setHref((THref) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._text_ == oldChild)
        {
            setText((PText) newChild);
            return;
        }

        if(this._closeTagRange_ == oldChild)
        {
            setCloseTagRange((TCloseTagRange) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
