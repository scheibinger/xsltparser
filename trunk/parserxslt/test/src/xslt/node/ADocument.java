/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.node;

import xslt.analysis.*;

@SuppressWarnings("nls")
public final class ADocument extends PDocument
{
    private PImports _imports_;
    private PInnerElements _innerElements_;

    public ADocument()
    {
        // Constructor
    }

    public ADocument(
        @SuppressWarnings("hiding") PImports _imports_,
        @SuppressWarnings("hiding") PInnerElements _innerElements_)
    {
        // Constructor
        setImports(_imports_);

        setInnerElements(_innerElements_);

    }

    @Override
    public Object clone()
    {
        return new ADocument(
            cloneNode(this._imports_),
            cloneNode(this._innerElements_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADocument(this);
    }

    public PImports getImports()
    {
        return this._imports_;
    }

    public void setImports(PImports node)
    {
        if(this._imports_ != null)
        {
            this._imports_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._imports_ = node;
    }

    public PInnerElements getInnerElements()
    {
        return this._innerElements_;
    }

    public void setInnerElements(PInnerElements node)
    {
        if(this._innerElements_ != null)
        {
            this._innerElements_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._innerElements_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._imports_)
            + toString(this._innerElements_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._imports_ == child)
        {
            this._imports_ = null;
            return;
        }

        if(this._innerElements_ == child)
        {
            this._innerElements_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._imports_ == oldChild)
        {
            setImports((PImports) newChild);
            return;
        }

        if(this._innerElements_ == oldChild)
        {
            setInnerElements((PInnerElements) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
