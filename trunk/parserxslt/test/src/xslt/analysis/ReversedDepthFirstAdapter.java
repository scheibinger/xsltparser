/* This file was generated by SableCC (http://www.sablecc.org/). */

package xslt.analysis;

import java.util.*;
import xslt.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPFile().apply(this);
        outStart(node);
    }

    public void inAFile(AFile node)
    {
        defaultIn(node);
    }

    public void outAFile(AFile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFile(AFile node)
    {
        inAFile(node);
        if(node.getFooter() != null)
        {
            node.getFooter().apply(this);
        }
        if(node.getDocument() != null)
        {
            node.getDocument().apply(this);
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFile(node);
    }

    public void inAFooter(AFooter node)
    {
        defaultIn(node);
    }

    public void outAFooter(AFooter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFooter(AFooter node)
    {
        inAFooter(node);
        if(node.getCloseTag() != null)
        {
            node.getCloseTag().apply(this);
        }
        if(node.getStyle() != null)
        {
            node.getStyle().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        outAFooter(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getSetOutput() != null)
        {
            node.getSetOutput().apply(this);
        }
        if(node.getCloseTag() != null)
        {
            node.getCloseTag().apply(this);
        }
        if(node.getXmlnsUrl() != null)
        {
            node.getXmlnsUrl().apply(this);
        }
        if(node.getXslUrl() != null)
        {
            node.getXslUrl().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getXmlns() != null)
        {
            node.getXmlns().apply(this);
        }
        if(node.getVersionOption() != null)
        {
            node.getVersionOption().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getVersion() != null)
        {
            node.getVersion().apply(this);
        }
        if(node.getStyle() != null)
        {
            node.getStyle().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAHeader(node);
    }

    public void inASetOutput(ASetOutput node)
    {
        defaultIn(node);
    }

    public void outASetOutput(ASetOutput node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASetOutput(ASetOutput node)
    {
        inASetOutput(node);
        if(node.getCloseTagRange() != null)
        {
            node.getCloseTagRange().apply(this);
        }
        if(node.getOutputOptions() != null)
        {
            node.getOutputOptions().apply(this);
        }
        if(node.getOutput() != null)
        {
            node.getOutput().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outASetOutput(node);
    }

    public void inASingleOutputOptions(ASingleOutputOptions node)
    {
        defaultIn(node);
    }

    public void outASingleOutputOptions(ASingleOutputOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleOutputOptions(ASingleOutputOptions node)
    {
        inASingleOutputOptions(node);
        if(node.getOutputOption() != null)
        {
            node.getOutputOption().apply(this);
        }
        outASingleOutputOptions(node);
    }

    public void inAMultipleOutputOptions(AMultipleOutputOptions node)
    {
        defaultIn(node);
    }

    public void outAMultipleOutputOptions(AMultipleOutputOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleOutputOptions(AMultipleOutputOptions node)
    {
        inAMultipleOutputOptions(node);
        if(node.getOutputOption() != null)
        {
            node.getOutputOption().apply(this);
        }
        if(node.getOutputOptions() != null)
        {
            node.getOutputOptions().apply(this);
        }
        outAMultipleOutputOptions(node);
    }

    public void inAMethodXmlOutputOption(AMethodXmlOutputOption node)
    {
        defaultIn(node);
    }

    public void outAMethodXmlOutputOption(AMethodXmlOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodXmlOutputOption(AMethodXmlOutputOption node)
    {
        inAMethodXmlOutputOption(node);
        if(node.getXml() != null)
        {
            node.getXml().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getMethod() != null)
        {
            node.getMethod().apply(this);
        }
        outAMethodXmlOutputOption(node);
    }

    public void inAMethodHtmlOutputOption(AMethodHtmlOutputOption node)
    {
        defaultIn(node);
    }

    public void outAMethodHtmlOutputOption(AMethodHtmlOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodHtmlOutputOption(AMethodHtmlOutputOption node)
    {
        inAMethodHtmlOutputOption(node);
        if(node.getHtml() != null)
        {
            node.getHtml().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getMethod() != null)
        {
            node.getMethod().apply(this);
        }
        outAMethodHtmlOutputOption(node);
    }

    public void inAMethodTextOutputOption(AMethodTextOutputOption node)
    {
        defaultIn(node);
    }

    public void outAMethodTextOutputOption(AMethodTextOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodTextOutputOption(AMethodTextOutputOption node)
    {
        inAMethodTextOutputOption(node);
        if(node.getTextFormat() != null)
        {
            node.getTextFormat().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getMethod() != null)
        {
            node.getMethod().apply(this);
        }
        outAMethodTextOutputOption(node);
    }

    public void inAVersionOutputOption(AVersionOutputOption node)
    {
        defaultIn(node);
    }

    public void outAVersionOutputOption(AVersionOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVersionOutputOption(AVersionOutputOption node)
    {
        inAVersionOutputOption(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getVersion() != null)
        {
            node.getVersion().apply(this);
        }
        outAVersionOutputOption(node);
    }

    public void inAEncodingOutputOption(AEncodingOutputOption node)
    {
        defaultIn(node);
    }

    public void outAEncodingOutputOption(AEncodingOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEncodingOutputOption(AEncodingOutputOption node)
    {
        inAEncodingOutputOption(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getEncoding() != null)
        {
            node.getEncoding().apply(this);
        }
        outAEncodingOutputOption(node);
    }

    public void inAOmitXmlDeclarationYesOutputOption(AOmitXmlDeclarationYesOutputOption node)
    {
        defaultIn(node);
    }

    public void outAOmitXmlDeclarationYesOutputOption(AOmitXmlDeclarationYesOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOmitXmlDeclarationYesOutputOption(AOmitXmlDeclarationYesOutputOption node)
    {
        inAOmitXmlDeclarationYesOutputOption(node);
        if(node.getYes() != null)
        {
            node.getYes().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getOmitXmlDeclaration() != null)
        {
            node.getOmitXmlDeclaration().apply(this);
        }
        outAOmitXmlDeclarationYesOutputOption(node);
    }

    public void inAOmitXmlDeclarationNoOutputOption(AOmitXmlDeclarationNoOutputOption node)
    {
        defaultIn(node);
    }

    public void outAOmitXmlDeclarationNoOutputOption(AOmitXmlDeclarationNoOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOmitXmlDeclarationNoOutputOption(AOmitXmlDeclarationNoOutputOption node)
    {
        inAOmitXmlDeclarationNoOutputOption(node);
        if(node.getNo() != null)
        {
            node.getNo().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getOmitXmlDeclaration() != null)
        {
            node.getOmitXmlDeclaration().apply(this);
        }
        outAOmitXmlDeclarationNoOutputOption(node);
    }

    public void inAStandaloneYesOutputOption(AStandaloneYesOutputOption node)
    {
        defaultIn(node);
    }

    public void outAStandaloneYesOutputOption(AStandaloneYesOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStandaloneYesOutputOption(AStandaloneYesOutputOption node)
    {
        inAStandaloneYesOutputOption(node);
        if(node.getYes() != null)
        {
            node.getYes().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getStandalone() != null)
        {
            node.getStandalone().apply(this);
        }
        outAStandaloneYesOutputOption(node);
    }

    public void inAStandaloneNoOutputOption(AStandaloneNoOutputOption node)
    {
        defaultIn(node);
    }

    public void outAStandaloneNoOutputOption(AStandaloneNoOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStandaloneNoOutputOption(AStandaloneNoOutputOption node)
    {
        inAStandaloneNoOutputOption(node);
        if(node.getNo() != null)
        {
            node.getNo().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getStandalone() != null)
        {
            node.getStandalone().apply(this);
        }
        outAStandaloneNoOutputOption(node);
    }

    public void inADoctypePublicOutputOption(ADoctypePublicOutputOption node)
    {
        defaultIn(node);
    }

    public void outADoctypePublicOutputOption(ADoctypePublicOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoctypePublicOutputOption(ADoctypePublicOutputOption node)
    {
        inADoctypePublicOutputOption(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getDoctypePublic() != null)
        {
            node.getDoctypePublic().apply(this);
        }
        outADoctypePublicOutputOption(node);
    }

    public void inADoctypeSystemOutputOption(ADoctypeSystemOutputOption node)
    {
        defaultIn(node);
    }

    public void outADoctypeSystemOutputOption(ADoctypeSystemOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoctypeSystemOutputOption(ADoctypeSystemOutputOption node)
    {
        inADoctypeSystemOutputOption(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getDoctypeSystem() != null)
        {
            node.getDoctypeSystem().apply(this);
        }
        outADoctypeSystemOutputOption(node);
    }

    public void inACdataSectionElementsOutputOption(ACdataSectionElementsOutputOption node)
    {
        defaultIn(node);
    }

    public void outACdataSectionElementsOutputOption(ACdataSectionElementsOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACdataSectionElementsOutputOption(ACdataSectionElementsOutputOption node)
    {
        inACdataSectionElementsOutputOption(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getCdataSectionElements() != null)
        {
            node.getCdataSectionElements().apply(this);
        }
        outACdataSectionElementsOutputOption(node);
    }

    public void inAIndentYesOutputOption(AIndentYesOutputOption node)
    {
        defaultIn(node);
    }

    public void outAIndentYesOutputOption(AIndentYesOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndentYesOutputOption(AIndentYesOutputOption node)
    {
        inAIndentYesOutputOption(node);
        if(node.getYes() != null)
        {
            node.getYes().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getIndent() != null)
        {
            node.getIndent().apply(this);
        }
        outAIndentYesOutputOption(node);
    }

    public void inAIndentNoOutputOption(AIndentNoOutputOption node)
    {
        defaultIn(node);
    }

    public void outAIndentNoOutputOption(AIndentNoOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndentNoOutputOption(AIndentNoOutputOption node)
    {
        inAIndentNoOutputOption(node);
        if(node.getNo() != null)
        {
            node.getNo().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getIndent() != null)
        {
            node.getIndent().apply(this);
        }
        outAIndentNoOutputOption(node);
    }

    public void inAMediaTypeOutputOption(AMediaTypeOutputOption node)
    {
        defaultIn(node);
    }

    public void outAMediaTypeOutputOption(AMediaTypeOutputOption node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMediaTypeOutputOption(AMediaTypeOutputOption node)
    {
        inAMediaTypeOutputOption(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getMediaType() != null)
        {
            node.getMediaType().apply(this);
        }
        outAMediaTypeOutputOption(node);
    }

    public void inADocument(ADocument node)
    {
        defaultIn(node);
    }

    public void outADocument(ADocument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADocument(ADocument node)
    {
        inADocument(node);
        if(node.getInnerElements() != null)
        {
            node.getInnerElements().apply(this);
        }
        if(node.getImports() != null)
        {
            node.getImports().apply(this);
        }
        outADocument(node);
    }

    public void inASingleImports(ASingleImports node)
    {
        defaultIn(node);
    }

    public void outASingleImports(ASingleImports node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleImports(ASingleImports node)
    {
        inASingleImports(node);
        if(node.getImportElement() != null)
        {
            node.getImportElement().apply(this);
        }
        outASingleImports(node);
    }

    public void inAMultipleImports(AMultipleImports node)
    {
        defaultIn(node);
    }

    public void outAMultipleImports(AMultipleImports node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleImports(AMultipleImports node)
    {
        inAMultipleImports(node);
        if(node.getImportElement() != null)
        {
            node.getImportElement().apply(this);
        }
        if(node.getImports() != null)
        {
            node.getImports().apply(this);
        }
        outAMultipleImports(node);
    }

    public void inAImportImportElement(AImportImportElement node)
    {
        defaultIn(node);
    }

    public void outAImportImportElement(AImportImportElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportImportElement(AImportImportElement node)
    {
        inAImportImportElement(node);
        if(node.getCloseTagRange() != null)
        {
            node.getCloseTagRange().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getHref() != null)
        {
            node.getHref().apply(this);
        }
        if(node.getImport() != null)
        {
            node.getImport().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAImportImportElement(node);
    }

    public void inAIncludeImportElement(AIncludeImportElement node)
    {
        defaultIn(node);
    }

    public void outAIncludeImportElement(AIncludeImportElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludeImportElement(AIncludeImportElement node)
    {
        inAIncludeImportElement(node);
        if(node.getCloseTagRange() != null)
        {
            node.getCloseTagRange().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getHref() != null)
        {
            node.getHref().apply(this);
        }
        if(node.getInclude() != null)
        {
            node.getInclude().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAIncludeImportElement(node);
    }

    public void inASingleInnerElements(ASingleInnerElements node)
    {
        defaultIn(node);
    }

    public void outASingleInnerElements(ASingleInnerElements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleInnerElements(ASingleInnerElements node)
    {
        inASingleInnerElements(node);
        if(node.getInnerElement() != null)
        {
            node.getInnerElement().apply(this);
        }
        outASingleInnerElements(node);
    }

    public void inAMultipleInnerElements(AMultipleInnerElements node)
    {
        defaultIn(node);
    }

    public void outAMultipleInnerElements(AMultipleInnerElements node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleInnerElements(AMultipleInnerElements node)
    {
        inAMultipleInnerElements(node);
        if(node.getInnerElement() != null)
        {
            node.getInnerElement().apply(this);
        }
        if(node.getInnerElements() != null)
        {
            node.getInnerElements().apply(this);
        }
        outAMultipleInnerElements(node);
    }

    public void inAParamInnerElement(AParamInnerElement node)
    {
        defaultIn(node);
    }

    public void outAParamInnerElement(AParamInnerElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamInnerElement(AParamInnerElement node)
    {
        inAParamInnerElement(node);
        if(node.getCloseTagRange() != null)
        {
            node.getCloseTagRange().apply(this);
        }
        if(node.getParamSelect() != null)
        {
            node.getParamSelect().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getParamName() != null)
        {
            node.getParamName().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAParamInnerElement(node);
    }

    public void inAVariableInnerElement(AVariableInnerElement node)
    {
        defaultIn(node);
    }

    public void outAVariableInnerElement(AVariableInnerElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableInnerElement(AVariableInnerElement node)
    {
        inAVariableInnerElement(node);
        if(node.getCloseTagRange() != null)
        {
            node.getCloseTagRange().apply(this);
        }
        if(node.getParamSelect() != null)
        {
            node.getParamSelect().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getParamName() != null)
        {
            node.getParamName().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAVariableInnerElement(node);
    }

    public void inAAttributeInnerElement(AAttributeInnerElement node)
    {
        defaultIn(node);
    }

    public void outAAttributeInnerElement(AAttributeInnerElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributeInnerElement(AAttributeInnerElement node)
    {
        inAAttributeInnerElement(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        if(node.getAttributes() != null)
        {
            node.getAttributes().apply(this);
        }
        if(node.getCloseAttribute() != null)
        {
            node.getCloseAttribute().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAAttributeInnerElement(node);
    }

    public void inATemplateInnerElement(ATemplateInnerElement node)
    {
        defaultIn(node);
    }

    public void outATemplateInnerElement(ATemplateInnerElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATemplateInnerElement(ATemplateInnerElement node)
    {
        inATemplateInnerElement(node);
        if(node.getTemplateElement() != null)
        {
            node.getTemplateElement().apply(this);
        }
        outATemplateInnerElement(node);
    }

    public void inASingleAttributes(ASingleAttributes node)
    {
        defaultIn(node);
    }

    public void outASingleAttributes(ASingleAttributes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleAttributes(ASingleAttributes node)
    {
        inASingleAttributes(node);
        if(node.getAttributeElement() != null)
        {
            node.getAttributeElement().apply(this);
        }
        outASingleAttributes(node);
    }

    public void inAMultipleAttributes(AMultipleAttributes node)
    {
        defaultIn(node);
    }

    public void outAMultipleAttributes(AMultipleAttributes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleAttributes(AMultipleAttributes node)
    {
        inAMultipleAttributes(node);
        if(node.getAttributeElement() != null)
        {
            node.getAttributeElement().apply(this);
        }
        if(node.getAttributes() != null)
        {
            node.getAttributes().apply(this);
        }
        outAMultipleAttributes(node);
    }

    public void inAAttributeElement(AAttributeElement node)
    {
        defaultIn(node);
    }

    public void outAAttributeElement(AAttributeElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributeElement(AAttributeElement node)
    {
        inAAttributeElement(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseAttribute() != null)
        {
            node.getCloseAttribute().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAAttributeElement(node);
    }

    public void inAMatchTemplateElement(AMatchTemplateElement node)
    {
        defaultIn(node);
    }

    public void outAMatchTemplateElement(AMatchTemplateElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchTemplateElement(AMatchTemplateElement node)
    {
        inAMatchTemplateElement(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseTemplate() != null)
        {
            node.getCloseTemplate().apply(this);
        }
        if(node.getTemplateOptions() != null)
        {
            node.getTemplateOptions().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getMatch() != null)
        {
            node.getMatch().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAMatchTemplateElement(node);
    }

    public void inANameTemplateElement(ANameTemplateElement node)
    {
        defaultIn(node);
    }

    public void outANameTemplateElement(ANameTemplateElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANameTemplateElement(ANameTemplateElement node)
    {
        inANameTemplateElement(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseTemplate() != null)
        {
            node.getCloseTemplate().apply(this);
        }
        if(node.getTemplateOptions() != null)
        {
            node.getTemplateOptions().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outANameTemplateElement(node);
    }

    public void inAModeTemplateOptions(AModeTemplateOptions node)
    {
        defaultIn(node);
    }

    public void outAModeTemplateOptions(AModeTemplateOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModeTemplateOptions(AModeTemplateOptions node)
    {
        inAModeTemplateOptions(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getMode() != null)
        {
            node.getMode().apply(this);
        }
        outAModeTemplateOptions(node);
    }

    public void inAPriorityTemplateOptions(APriorityTemplateOptions node)
    {
        defaultIn(node);
    }

    public void outAPriorityTemplateOptions(APriorityTemplateOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPriorityTemplateOptions(APriorityTemplateOptions node)
    {
        inAPriorityTemplateOptions(node);
        if(node.getDigits() != null)
        {
            node.getDigits().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getPriority() != null)
        {
            node.getPriority().apply(this);
        }
        outAPriorityTemplateOptions(node);
    }

    public void inAApplyImportsTemplateContent(AApplyImportsTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAApplyImportsTemplateContent(AApplyImportsTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApplyImportsTemplateContent(AApplyImportsTemplateContent node)
    {
        inAApplyImportsTemplateContent(node);
        if(node.getCloseTag() != null)
        {
            node.getCloseTag().apply(this);
        }
        if(node.getApplyImports() != null)
        {
            node.getApplyImports().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAApplyImportsTemplateContent(node);
    }

    public void inAApplyTemplatesTemplateContent(AApplyTemplatesTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAApplyTemplatesTemplateContent(AApplyTemplatesTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApplyTemplatesTemplateContent(AApplyTemplatesTemplateContent node)
    {
        inAApplyTemplatesTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        if(node.getApplyTemplatesParameters() != null)
        {
            node.getApplyTemplatesParameters().apply(this);
        }
        if(node.getCloseApplyTemplates() != null)
        {
            node.getCloseApplyTemplates().apply(this);
        }
        if(node.getApplyTemplatesOptions() != null)
        {
            node.getApplyTemplatesOptions().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAApplyTemplatesTemplateContent(node);
    }

    public void inAApplyTemplates2TemplateContent(AApplyTemplates2TemplateContent node)
    {
        defaultIn(node);
    }

    public void outAApplyTemplates2TemplateContent(AApplyTemplates2TemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAApplyTemplates2TemplateContent(AApplyTemplates2TemplateContent node)
    {
        inAApplyTemplates2TemplateContent(node);
        if(node.getCloseTagRange() != null)
        {
            node.getCloseTagRange().apply(this);
        }
        if(node.getApplyTemplatesOptions() != null)
        {
            node.getApplyTemplatesOptions().apply(this);
        }
        if(node.getApplyTemplates() != null)
        {
            node.getApplyTemplates().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAApplyTemplates2TemplateContent(node);
    }

    public void inAAttributeTemplateContent(AAttributeTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAAttributeTemplateContent(AAttributeTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAttributeTemplateContent(AAttributeTemplateContent node)
    {
        inAAttributeTemplateContent(node);
        if(node.getAttributeElement() != null)
        {
            node.getAttributeElement().apply(this);
        }
        outAAttributeTemplateContent(node);
    }

    public void inACallTemplateTemplateContent(ACallTemplateTemplateContent node)
    {
        defaultIn(node);
    }

    public void outACallTemplateTemplateContent(ACallTemplateTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallTemplateTemplateContent(ACallTemplateTemplateContent node)
    {
        inACallTemplateTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        if(node.getCloseCallTemplate() != null)
        {
            node.getCloseCallTemplate().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outACallTemplateTemplateContent(node);
    }

    public void inAChooseTemplateContent(AChooseTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAChooseTemplateContent(AChooseTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChooseTemplateContent(AChooseTemplateContent node)
    {
        inAChooseTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        if(node.getTests() != null)
        {
            node.getTests().apply(this);
        }
        if(node.getCloseChoose() != null)
        {
            node.getCloseChoose().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAChooseTemplateContent(node);
    }

    public void inACommentTemplateContent(ACommentTemplateContent node)
    {
        defaultIn(node);
    }

    public void outACommentTemplateContent(ACommentTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommentTemplateContent(ACommentTemplateContent node)
    {
        inACommentTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getCloseComment() != null)
        {
            node.getCloseComment().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outACommentTemplateContent(node);
    }

    public void inACopyTemplateContent(ACopyTemplateContent node)
    {
        defaultIn(node);
    }

    public void outACopyTemplateContent(ACopyTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACopyTemplateContent(ACopyTemplateContent node)
    {
        inACopyTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseCopy() != null)
        {
            node.getCloseCopy().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outACopyTemplateContent(node);
    }

    public void inACopyOfTemplateContent(ACopyOfTemplateContent node)
    {
        defaultIn(node);
    }

    public void outACopyOfTemplateContent(ACopyOfTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACopyOfTemplateContent(ACopyOfTemplateContent node)
    {
        inACopyOfTemplateContent(node);
        if(node.getCloseTagRange() != null)
        {
            node.getCloseTagRange().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getCopyOf() != null)
        {
            node.getCopyOf().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outACopyOfTemplateContent(node);
    }

    public void inAElementTemplateContent(AElementTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAElementTemplateContent(AElementTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementTemplateContent(AElementTemplateContent node)
    {
        inAElementTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseElement() != null)
        {
            node.getCloseElement().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAElementTemplateContent(node);
    }

    public void inAFallbackTemplateContent(AFallbackTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAFallbackTemplateContent(AFallbackTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFallbackTemplateContent(AFallbackTemplateContent node)
    {
        inAFallbackTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseFallback() != null)
        {
            node.getCloseFallback().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAFallbackTemplateContent(node);
    }

    public void inAForEachTemplateContent(AForEachTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAForEachTemplateContent(AForEachTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForEachTemplateContent(AForEachTemplateContent node)
    {
        inAForEachTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSorting() != null)
        {
            node.getSorting().apply(this);
        }
        if(node.getCloseForEach() != null)
        {
            node.getCloseForEach().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAForEachTemplateContent(node);
    }

    public void inAIfTemplateContent(AIfTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAIfTemplateContent(AIfTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfTemplateContent(AIfTemplateContent node)
    {
        inAIfTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseIf() != null)
        {
            node.getCloseIf().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getTest() != null)
        {
            node.getTest().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAIfTemplateContent(node);
    }

    public void inAValueOfTemplateContent(AValueOfTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAValueOfTemplateContent(AValueOfTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueOfTemplateContent(AValueOfTemplateContent node)
    {
        inAValueOfTemplateContent(node);
        if(node.getCloseTagRange() != null)
        {
            node.getCloseTagRange().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getValueOf() != null)
        {
            node.getValueOf().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAValueOfTemplateContent(node);
    }

    public void inAParamTemplateContent(AParamTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAParamTemplateContent(AParamTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamTemplateContent(AParamTemplateContent node)
    {
        inAParamTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseParam() != null)
        {
            node.getCloseParam().apply(this);
        }
        if(node.getParamSelect() != null)
        {
            node.getParamSelect().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getParamName() != null)
        {
            node.getParamName().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAParamTemplateContent(node);
    }

    public void inAVariableTemplateContent(AVariableTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAVariableTemplateContent(AVariableTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableTemplateContent(AVariableTemplateContent node)
    {
        inAVariableTemplateContent(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseVariable() != null)
        {
            node.getCloseVariable().apply(this);
        }
        if(node.getVariableSelect() != null)
        {
            node.getVariableSelect().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        if(node.getVariableName() != null)
        {
            node.getVariableName().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAVariableTemplateContent(node);
    }

    public void inAPassthruTemplateContent(APassthruTemplateContent node)
    {
        defaultIn(node);
    }

    public void outAPassthruTemplateContent(APassthruTemplateContent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassthruTemplateContent(APassthruTemplateContent node)
    {
        inAPassthruTemplateContent(node);
        {
            List<TTextToPass> copy = new ArrayList<TTextToPass>(node.getTextToPass());
            Collections.reverse(copy);
            for(TTextToPass e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOpenTag() != null)
        {
            node.getOpenTag().apply(this);
        }
        outAPassthruTemplateContent(node);
    }

    public void inASelectApplyTemplatesOptions(ASelectApplyTemplatesOptions node)
    {
        defaultIn(node);
    }

    public void outASelectApplyTemplatesOptions(ASelectApplyTemplatesOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectApplyTemplatesOptions(ASelectApplyTemplatesOptions node)
    {
        inASelectApplyTemplatesOptions(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        outASelectApplyTemplatesOptions(node);
    }

    public void inAModeApplyTemplatesOptions(AModeApplyTemplatesOptions node)
    {
        defaultIn(node);
    }

    public void outAModeApplyTemplatesOptions(AModeApplyTemplatesOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModeApplyTemplatesOptions(AModeApplyTemplatesOptions node)
    {
        inAModeApplyTemplatesOptions(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getMode() != null)
        {
            node.getMode().apply(this);
        }
        outAModeApplyTemplatesOptions(node);
    }

    public void inAParameterApplyTemplatesParameters(AParameterApplyTemplatesParameters node)
    {
        defaultIn(node);
    }

    public void outAParameterApplyTemplatesParameters(AParameterApplyTemplatesParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterApplyTemplatesParameters(AParameterApplyTemplatesParameters node)
    {
        inAParameterApplyTemplatesParameters(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outAParameterApplyTemplatesParameters(node);
    }

    public void inASortingApplyTemplatesParameters(ASortingApplyTemplatesParameters node)
    {
        defaultIn(node);
    }

    public void outASortingApplyTemplatesParameters(ASortingApplyTemplatesParameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASortingApplyTemplatesParameters(ASortingApplyTemplatesParameters node)
    {
        inASortingApplyTemplatesParameters(node);
        if(node.getSorting() != null)
        {
            node.getSorting().apply(this);
        }
        outASortingApplyTemplatesParameters(node);
    }

    public void inASorting(ASorting node)
    {
        defaultIn(node);
    }

    public void outASorting(ASorting node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASorting(ASorting node)
    {
        inASorting(node);
        if(node.getCloseTag() != null)
        {
            node.getCloseTag().apply(this);
        }
        if(node.getSortOptions() != null)
        {
            node.getSortOptions().apply(this);
        }
        if(node.getSort() != null)
        {
            node.getSort().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outASorting(node);
    }

    public void inASelectSortOptions(ASelectSortOptions node)
    {
        defaultIn(node);
    }

    public void outASelectSortOptions(ASelectSortOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelectSortOptions(ASelectSortOptions node)
    {
        inASelectSortOptions(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getSelect() != null)
        {
            node.getSelect().apply(this);
        }
        outASelectSortOptions(node);
    }

    public void inAOrderAscSortOptions(AOrderAscSortOptions node)
    {
        defaultIn(node);
    }

    public void outAOrderAscSortOptions(AOrderAscSortOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrderAscSortOptions(AOrderAscSortOptions node)
    {
        inAOrderAscSortOptions(node);
        if(node.getAscending() != null)
        {
            node.getAscending().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getOrder() != null)
        {
            node.getOrder().apply(this);
        }
        outAOrderAscSortOptions(node);
    }

    public void inAOrderDescSortOptions(AOrderDescSortOptions node)
    {
        defaultIn(node);
    }

    public void outAOrderDescSortOptions(AOrderDescSortOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrderDescSortOptions(AOrderDescSortOptions node)
    {
        inAOrderDescSortOptions(node);
        if(node.getDescending() != null)
        {
            node.getDescending().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getOrder() != null)
        {
            node.getOrder().apply(this);
        }
        outAOrderDescSortOptions(node);
    }

    public void inACaseOrderUpperSortOptions(ACaseOrderUpperSortOptions node)
    {
        defaultIn(node);
    }

    public void outACaseOrderUpperSortOptions(ACaseOrderUpperSortOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseOrderUpperSortOptions(ACaseOrderUpperSortOptions node)
    {
        inACaseOrderUpperSortOptions(node);
        if(node.getUpperFirst() != null)
        {
            node.getUpperFirst().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getCaseOrder() != null)
        {
            node.getCaseOrder().apply(this);
        }
        outACaseOrderUpperSortOptions(node);
    }

    public void inACaseOrderLoweaSortOptions(ACaseOrderLoweaSortOptions node)
    {
        defaultIn(node);
    }

    public void outACaseOrderLoweaSortOptions(ACaseOrderLoweaSortOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaseOrderLoweaSortOptions(ACaseOrderLoweaSortOptions node)
    {
        inACaseOrderLoweaSortOptions(node);
        if(node.getLowerFirst() != null)
        {
            node.getLowerFirst().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getCaseOrder() != null)
        {
            node.getCaseOrder().apply(this);
        }
        outACaseOrderLoweaSortOptions(node);
    }

    public void inALangSortOptions(ALangSortOptions node)
    {
        defaultIn(node);
    }

    public void outALangSortOptions(ALangSortOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALangSortOptions(ALangSortOptions node)
    {
        inALangSortOptions(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getXml() != null)
        {
            node.getXml().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getLang() != null)
        {
            node.getLang().apply(this);
        }
        outALangSortOptions(node);
    }

    public void inADataTypeTextSortOptions(ADataTypeTextSortOptions node)
    {
        defaultIn(node);
    }

    public void outADataTypeTextSortOptions(ADataTypeTextSortOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypeTextSortOptions(ADataTypeTextSortOptions node)
    {
        inADataTypeTextSortOptions(node);
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outADataTypeTextSortOptions(node);
    }

    public void inADataTypeNumberSortOptions(ADataTypeNumberSortOptions node)
    {
        defaultIn(node);
    }

    public void outADataTypeNumberSortOptions(ADataTypeNumberSortOptions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypeNumberSortOptions(ADataTypeNumberSortOptions node)
    {
        inADataTypeNumberSortOptions(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outADataTypeNumberSortOptions(node);
    }

    public void inAParameter(AParameter node)
    {
        defaultIn(node);
    }

    public void outAParameter(AParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameter(AParameter node)
    {
        inAParameter(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseWithParam() != null)
        {
            node.getCloseWithParam().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outAParameter(node);
    }

    public void inASingleTests(ASingleTests node)
    {
        defaultIn(node);
    }

    public void outASingleTests(ASingleTests node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleTests(ASingleTests node)
    {
        inASingleTests(node);
        if(node.getTestElement() != null)
        {
            node.getTestElement().apply(this);
        }
        outASingleTests(node);
    }

    public void inAMultipleTests(AMultipleTests node)
    {
        defaultIn(node);
    }

    public void outAMultipleTests(AMultipleTests node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleTests(AMultipleTests node)
    {
        inAMultipleTests(node);
        if(node.getTestElement() != null)
        {
            node.getTestElement().apply(this);
        }
        if(node.getTests() != null)
        {
            node.getTests().apply(this);
        }
        outAMultipleTests(node);
    }

    public void inATestElement(ATestElement node)
    {
        defaultIn(node);
    }

    public void outATestElement(ATestElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATestElement(ATestElement node)
    {
        inATestElement(node);
        if(node.getCloseXslt() != null)
        {
            node.getCloseXslt().apply(this);
        }
        if(node.getClose() != null)
        {
            node.getClose().apply(this);
        }
        if(node.getCloseXsltTag() != null)
        {
            node.getCloseXsltTag().apply(this);
        }
        {
            List<PTemplateContent> copy = new ArrayList<PTemplateContent>(node.getTemplateContent());
            Collections.reverse(copy);
            for(PTemplateContent e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCloseWhen() != null)
        {
            node.getCloseWhen().apply(this);
        }
        if(node.getText() != null)
        {
            node.getText().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getTest() != null)
        {
            node.getTest().apply(this);
        }
        if(node.getOpen() != null)
        {
            node.getOpen().apply(this);
        }
        if(node.getXsltTag() != null)
        {
            node.getXsltTag().apply(this);
        }
        outATestElement(node);
    }

    public void inAText(AText node)
    {
        defaultIn(node);
    }

    public void outAText(AText node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAText(AText node)
    {
        inAText(node);
        if(node.getWords() != null)
        {
            node.getWords().apply(this);
        }
        outAText(node);
    }
}
